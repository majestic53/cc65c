CC65C Lexer BNF
===============

arithmetic ::= "+" | "&" | "/" | "%" | "*" | "|" | "-" | "^"

binary ::= "&&" | "==" | ">" | ">=" | "<" | "<=" | "!=" | "||"

brace ::= "]" | "["

bracket ::= ")" | "("

command ::= "adc" | "and" | "asl" | | "bbr0" | "bbr1" | "bbr2" | "bbr3" | "bbr4" | "bbr5" | "bbr6" | "bbr7" 
		| "bbs0" | "bbs1" | "bbs2" | "bbs3" | "bbs4" | "bbs5" | "bbs6" | "bbs7" | "bcc" | "bcs" 
		| "beq" | "bit" | "bmi" | "bne" | "bpl" | "bra" | "brk" | "bvc" | "bvs" | "clc" | "cld" 
		| "cli" | "clv" | "cmp" | "cpx" | "cpy" | "dec" | "dex" | "dey" | "eor" | "inc" | "inx" 
		| "iny" | "jmp" | "jsr" | "lda" | "ldx" | "ldy" | "lsr" | "nop" | "ora" | "pha" | "php" 
		| "phx" | "phy" | "pla" | "plp" | "plx" | "ply" | "rmb0" | "rmb1" | "rmb2" | "rmb3" 
		| "rmb4" | "rmb5" | "rmb6" | "rmb7" | "rol" | "ror" | "rti" | "rts" | "sbc" | "sec" 
		| "sed" | "sei" | "smb0" | "smb1" | "smb2" | "smb3" | "smb4" | "smb5" | "smb6" | "smb7" 
		| "sta" | "stp" | "stx" | "sty" | "stz" | "tax" | "tay" | "trb" | "tsb" | "tsx" | "txa" 
		| "txs" | "tya" | "wai"

comment ::= ";" [^\n]* | ";;" .* ";;"

condition ::= "else" | "elif" | "elifdef" | "endif" | "if" | "ifdef"

define ::= "db" | "dw" | "def" | "org" | "res" | "seg" | "undef"

identifier ::= [_a-zA-Z][_0-9a-zA-Z]*

immediate ::= "#"

include ::= "incb" | "inch" | "incs"

label ::= <identifier> ":"

literal ::= <literal_char> | <literal_str>

literal_char ::= "'" [<literal_char_escape> | .] "'"

literal_char_escape ::= "\" [<literal_char_escape_hex> | <literal_char_escape_oct> 
			| "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\" | "'" | """ | "?"]

literal_char_escape_hex ::= "x" [0-9a-f]{1-2}

literal_char_escape_oct ::= [0-7]{1-3}

literal_str ::= """ [<literal_char_escape> | .]* """

macro ::= "byte" | "high" | "low" | "word"

position ::= "$$" | "$"

register ::= "a" | "x" | "y"

scalar ::= "-"? [<scalar_bin> | <scalar_dec> | <scalar_hex> | <scalar_oct>]

scalar_bin ::= "0b" [0-1]+

scalar_dec ::= [0-9]+

scalar_hex ::= "0x" [0-9a-f]+

scalar_oct ::= "0c" [0-7]*

seperator ::= ","

unary ::= "~" | "!"
