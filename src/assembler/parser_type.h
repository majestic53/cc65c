/**
 * cc65c
 * Copyright (C) 2016 David Jolly
 *
 * cc65c is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cc65c is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef CC65C_ASSEMBLER_PARSER_TYPE_H_
#define CC65C_ASSEMBLER_PARSER_TYPE_H_

#include "../../include/core/exception.h"

namespace cc65c {

	namespace assembler {

		#define CC65C_ASSEMBLER_PARSER_HEADER "[CC65C::ASSEMBLER::PARSER]"

#ifndef NDEBUG
		#define CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER CC65C_ASSEMBLER_PARSER_HEADER " "
#else
		#define CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER
#endif // NDEBUG

		enum {
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_ACCUMULATOR = 0,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_BRACE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_BRACKET,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_COMMAND,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_CONDITION,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_CONDITION_IF,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_CONDITION_IF_DEFINE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_DEFINE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_EXPRESSION,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_IDENTIFIER,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_IMMEDIATE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_INCLUDE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_LABEL,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_LITERAL,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_MACRO,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_REGISTER,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_REGISTER_X,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_REGISTER_Y,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_SEPERATOR,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_EXPECTING_STATEMENT,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_INVALID_CONDITION,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_INVALID_DEFINE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_INVALID_MACRO,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_INVALID_REGISTER,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_NO_NEXT_TREE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_NO_PREVIOUS_TREE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_BRACE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_BRACKET,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_DEFINE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_EXPRESSION,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_IF,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_IF_DEFINE,
			CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_MACRO,
		};

		#define CC65C_ASSEMBLER_PARSER_EXCEPTION_MAX CC65C_ASSEMBLER_PARSER_EXCEPTION_UNTERMINATED_MACRO

		static const std::string CC65C_ASSEMBLER_PARSER_EXCEPTION_STR[] = {
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting accumulator",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting brace",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting bracket",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting command",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting condition",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting if",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting ifdef",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting define",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting expression",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting identifier",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting immediate",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting include",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting label",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting literal",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting macro",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting register",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting x-index register",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting y-index register",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting seperator",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Expecting statement",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Invalid condition",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Invalid define",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Invalid macro",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Invalid register",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "No next tree in stream",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "No previous tree in stream",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated brace",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated bracket",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated define",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated expression",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated if",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated ifdef",
			CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER "Unterminated macro",
			};

		#define CC65C_ASSEMBLER_PARSER_EXCEPTION_STRING(_TYPE_) \
			((_TYPE_) > CC65C_ASSEMBLER_PARSER_EXCEPTION_MAX ? CC65C_ASSEMBLER_PARSER_EXCEPTION_HEADER EXCEPTION_UNKNOWN : \
			STRING_CHECK(CC65C_ASSEMBLER_PARSER_EXCEPTION_STR[_TYPE_]))

		#define THROW_CC65C_ASSEMBLER_PARSER_EXCEPTION(_EXCEPT_) \
			THROW_EXCEPTION(CC65C_ASSEMBLER_PARSER_EXCEPTION_STRING(_EXCEPT_))
		#define THROW_CC65C_ASSEMBLER_PARSER_EXCEPTION_FORMAT(_EXCEPT_, _FORMAT_, ...) \
			THROW_EXCEPTION_FORMAT(CC65C_ASSEMBLER_PARSER_EXCEPTION_STRING(_EXCEPT_), \
				_FORMAT_, __VA_ARGS__)
	}
}

#endif // CC65C_ASSEMBLER_PARSER_TYPE_H_
